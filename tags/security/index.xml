<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Security on blog.jksolbakken.no</title><link>https://blog.jksolbakken.no/tags/security/</link><description>Recent content in Security on blog.jksolbakken.no</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 30 Aug 2022 19:46:56 +0200</lastBuildDate><atom:link href="https://blog.jksolbakken.no/tags/security/index.xml" rel="self" type="application/rss+xml"/><item><title>Trusted types</title><link>https://blog.jksolbakken.no/posts/trustedtypes/</link><pubDate>Tue, 30 Aug 2022 19:46:56 +0200</pubDate><guid>https://blog.jksolbakken.no/posts/trustedtypes/</guid><description>&lt;p>The latest addition to the XSS protection landscape is &lt;a href="https://w3c.github.io/webappsec-trusted-types/dist/spec/">Trusted Types&lt;/a>, &amp;ldquo;an API that allows applications to lock down powerful APIs to only accept non-spoofable, typed values in place of strings to prevent vulnerabilities caused by using these APIs with attacker-controlled inputs&amp;rdquo;.&lt;/p>&lt;p>Despite having gained a lot of attention for years, &lt;a href="https://owasp.org/www-community/attacks/xss/">Cross Site Scripting (XSS)&lt;/a> remains one of the most common types of vulnerabilities on the web. &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP">Content Security Policies&lt;/a> and automatic sanitization of outputs in frameworks like React and Vue are all powerful mechanisms, but none of them solve the problem completely. If you are going commando without the big frameworks you need to manually ensure proper sanitization of output to all unsafe DOM sinks, forget one and you are vulnerable. If one of the third party libraries you use have bugs and/or are compromised your CSP won&amp;rsquo;t save you because you&amp;rsquo;re still loading the code from trusted locations.&lt;/p>&lt;p>A trusted type is a function that all strings are run through before being passed to unsafe DOM sinks. Their behavior is defined by directives in your Content Security Policies:&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>Content-Security-Policy: require-trusted-types-for &lt;span style="color:#e6db74">&amp;#39;script&amp;#39;&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>With this policy in place, every time a script wants to write to an unsafe sink it passed through a trusted type named &lt;code>default&lt;/code>. This type is responsible for sanitizing the input so that it is safe to use. The example below uses &lt;a href="https://github.com/cure53/DOMPurify">DOMPurify&lt;/a>.&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// load/import DOMPurify &lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> (window.&lt;span style="color:#a6e22e">trustedTypes&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#a6e22e">trustedTypes&lt;/span>.&lt;span style="color:#a6e22e">createPolicy&lt;/span>) {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">trustedTypes&lt;/span>.&lt;span style="color:#a6e22e">createPolicy&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;default&amp;#39;&lt;/span>, {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">createHTML&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">DOMPurify&lt;/span>.&lt;span style="color:#a6e22e">sanitize&lt;/span>(&lt;span style="color:#a6e22e">string&lt;/span>, {&lt;span style="color:#a6e22e">RETURN_TRUSTED_TYPE&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span>})&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> });&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>If you want to use multiple trusted types for different parts of your pages you can specify those in the CSP directive:&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>Content-Security-Policy: require-trusted-types-for &lt;span style="color:#e6db74">&amp;#39;script&amp;#39;&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Content-Security-Policy: trusted-types foo bar &lt;span style="color:#e6db74">&amp;#39;allow-duplicates&amp;#39;&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Policy names may consist of alphanumeric characters and/or the special characters &lt;code>-#=_/@.%&lt;/code>.&lt;/p>&lt;p>The &lt;code>allow duplicate&lt;/code> directive allows multiple policies with the same name.&lt;/p>&lt;p>Creating and using named policies is done like this:&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> (window.&lt;span style="color:#a6e22e">trustedTypes&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#a6e22e">trustedTypes&lt;/span>.&lt;span style="color:#a6e22e">createPolicy&lt;/span>) {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">policyFoo&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">trustedTypes&lt;/span>.&lt;span style="color:#a6e22e">createPolicy&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;foo&amp;#39;&lt;/span>, { &lt;span style="color:#75715e">/* sanitizing here */&lt;/span> })&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">policyBar&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">trustedTypes&lt;/span>.&lt;span style="color:#a6e22e">createPolicy&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;bar&amp;#39;&lt;/span>, { &lt;span style="color:#75715e">/* sanitizing here */&lt;/span> })&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">myFirstDiv&lt;/span>.&lt;span style="color:#a6e22e">innerHTML&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">policyFoo&lt;/span>.&lt;span style="color:#a6e22e">createHTML&lt;/span>(&lt;span style="color:#a6e22e">data&lt;/span>)&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">myOtherDiv&lt;/span>.&lt;span style="color:#a6e22e">innerHTML&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">policyBar&lt;/span>.&lt;span style="color:#a6e22e">createHTML&lt;/span>(&lt;span style="color:#a6e22e">data&lt;/span>)&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now, if an attacker attempts to write strings directly to an unsafe sink the browser will throw an error like the one shown below.&lt;/p>&lt;p>&lt;img src="https://blog.jksolbakken.no/img/typeerror.png" alt="TypeError">&lt;/p>&lt;p>At the time of writing Trusted Types are &lt;a href="https://caniuse.com/?search=trusted%20types">supported&lt;/a> in Chrome, Edge and Opera. A &lt;a href="https://www.npmjs.com/package/trusted-types">polyfill&lt;/a> is available for the other browsers.&lt;/p></description></item></channel></rss>